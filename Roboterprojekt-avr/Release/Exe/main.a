;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.17 UL Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : BlueMatics
;Version : 0.0.1
;Date    : 16.11.2017
;Author  : Viktor Lau
;Company :
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*******************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdlib.h>
;#include "modules/port_init.h"

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
   .equ __lcd_port=0x15 ;PORTC
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
	sei
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;
;#include <io.h>
;#include <stdio.h>
;//#include <twi.h>
;#include <i2c.h>
;#include <string.h>
;#include <stdint.h>
;
;
;
;
;
;
;#define puts lcd_puts
;
;
;/**
; *  States
; */
;
;#define state_linedetector  0
;#define state_engine  1
;#define state_engine_dir  2
;#define state_distance_sensor  3
;#define state_lightsensor  4
;#define state_wiicam  5
;#define state_irtower  6
;#define state_servo  7
;#define state_ultrasonic  8
;#define state_esp  9
;#define state_stop 10
;
;
;/*
;* Servo
;*/
;
;
;#define MAX_SERVOS 1
;#define LEFT MIDDLE-220
;#define MIDDLE 350
;#define RIGHT MIDDLE+220
;#define PERIOD 4000
;
;
;
;/*
;*IR RECEIVER
;*/
;#define RC5TIME 	1.778e-3		// 1.778msec
;#define	XTAL		16.0E6
;#define PULSE_MIN	(unsigned char)(XTAL / 512 * RC5TIME * 0.2 + 0.5)
;#define PULSE_1_2	(unsigned char)(XTAL / 512 * RC5TIME * 0.8 + 0.5)
;#define PULSE_MAX	(unsigned char)(XTAL / 512 * RC5TIME * 1.2 + 0.5)
;
;
;/*
;*ULTRASONIC
;*/
;// Declare your global variables here
;char str[17];
;unsigned int iRisingEdge, iFallingEdge;
;unsigned int iTime;
;    bit bChange2=0;
;
;/* union declaration */
;union alpha
;{
;  unsigned char byte[2];
;  unsigned int  word;
;} icr3;
;
;
;
;
;
;// Globale Variablen
;signed char arTrim[MAX_SERVOS] = {0};
;unsigned int arServos[MAX_SERVOS] = {MIDDLE};

	.DSEG
;unsigned int Pause = PERIOD;
;int ucServoNr = 0;
;int ucNr = 0;
;
;char strTemp[17] = "";
;bit bChange = 1;
;bit bPause = 0;
;bit bMerk=1;
;bit inSERVOTEST=0;
;
;
;//IR RECEIVER
;bit	          rc5_bit=1;			// bit value
;unsigned char rc5_time=0;			// count bit time
;unsigned int  rc5_data=0;			// store result
;unsigned int  tmp;
;
;unsigned char ucToggle;
;unsigned char ucAdress;
;unsigned char ucData;
;
;char s[17];
;
;
;//WIICAM
;#define slaveadress 0xB0
;#define slaveread 0xB1
;unsigned int data[16];
;void write2Byte(char, char);
;void readData(void);
;void convertdata(void);
;void wii_cam_init(void);
;
;unsigned char Wert[5];  //Feld für Wertkonvertierung LCD
;unsigned int x[4]; 	//X,Y-Koordinaten der Objekte
;unsigned int y[4];	//X: 0..1023, Y: 0..767
;unsigned char sWIICAM[4];     //S: 0..15 (Objektgröße im extended Mode)
;unsigned int temp;
;
;
;
;
;
;void fnSetServo(unsigned char ucNr, unsigned char ucValue)
; 0000 0097 {

	.CSEG
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0098   arServos[ucNr] = ucValue;
;	ucNr -> Y+1
;	ucValue -> Y+0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0099 }
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;
;
;void fnDisplay(void )
; 0000 009D {
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 009E  char str[10];
; 0000 009F   lcd_clear();
;PCODE: $000000A8 VOL: 0
;	str -> Y+0
;PCODE: $000000A9 VOL: 0
; 0000 00A0   lcd_puts("POSITION-SERVO");
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00A1   lcd_gotoxy(0, 1);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00A2   itoa(arServos[ucNr]-MIDDLE, strTemp);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00A3   lcd_puts(strTemp);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00A4 }
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0

	.DSEG
_0x6:
	.BYTE 0xF
;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 00A9 {

	.CSEG
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00AA   // Reinitialize Timer 0 value
; 0000 00AB 
; 0000 00AC   //SERVO
; 0000 00AD   TCNT0=131;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00AE 
; 0000 00AF   if(!BUMPER_RIGHT&&inSERVOTEST==1){
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00B0   if((arServos[ucNr] <= 570)&&(arServos[ucNr] >=119)){
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00B1     delay_ms(250);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00B2     arServos[ucNr] += 10;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00B3     bChange = 1;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00B4    }else {
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00B5 
; 0000 00B6     delay_ms(250);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00B7     arServos[ucNr] -= 450;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00B8     bChange = 1;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00B9 
; 0000 00BA 
; 0000 00BB      }
;PCODE: $000000FA VOL: 0
; 0000 00BC   }
; 0000 00BD 
; 0000 00BE 
; 0000 00BF   //IR RECIVER
; 0000 00C0   TCNT0 = 254;					                // 2 * 256 = 512 cycle
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00C1   if( ++rc5_time > PULSE_MAX )                  // count pulse time
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00C2   {
; 0000 00C3     if( !(tmp & 0x4000) && (tmp & 0x2000) )	    // only if 14 bits received
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00C4       rc5_data = tmp;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00C5       tmp = 0;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00C6   }
; 0000 00C7   if (rc5_bit != REMOTE_CONTROL)                       // change detect
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00C8   {
; 0000 00C9       rc5_bit = !rc5_bit;	                    // 0x00 -> 0xFF -> 0x00
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00CA       if( rc5_time < PULSE_MIN )			    // too short
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 00CB       tmp = 0;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00CC     if( !tmp || rc5_time > PULSE_1_2 )          // start or long pulse time
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00CD     {
; 0000 00CE       if( !(tmp & 0x4000) )			            // not to many bits
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00CF       tmp = tmp << 1;				            // shift
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00D0       if(!rc5_bit)		                        // inverted bit
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00D1       tmp = tmp | 1;				            // insert new bit
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00D2       rc5_time = 0;				                // count next pulse time
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00D3     }
; 0000 00D4   }
;PCODE: $0000013F VOL: 0
; 0000 00D5 
; 0000 00D6  }
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;
;
;
;// Timer1 output compare A interrupt service routine
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 00DC {
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00DD 
; 0000 00DE //SERVO
; 0000 00DF   if (!bPause)
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00E0   {
; 0000 00E1     OCR1A = arServos[ucServoNr]+arTrim[ucServoNr];
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 00E2     SERVO = (1<<ucServoNr);
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00E3     Pause -= OCR1A;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00E4     if (++ucServoNr>=MAX_SERVOS)
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00E5     {
; 0000 00E6       ucServoNr = 0;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 00E7       bPause = 1;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 00E8     }
; 0000 00E9   }
;PCODE: $00000170 VOL: 0
; 0000 00EA   else
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 00EB   {
; 0000 00EC     OCR1A = Pause;
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 00ED     SERVO = 0;
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00EE     bPause = 0;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 00EF     Pause = PERIOD;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00F0   }
;PCODE: $0000017C VOL: 0
; 0000 00F1 
; 0000 00F2 }
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;
;
;
;
;// Timer3 input capture interrupt service routine
;interrupt [TIM3_CAPT] void timer3_capt_isr(void)
; 0000 00F9 {
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 00FA   icr3.byte[0] = ICR3L;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 00FB   icr3.byte[1] = ICR3H;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 00FC   if (ECHO)
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00FD   {
; 0000 00FE     // Rising Edge of ECHO
; 0000 00FF     iRisingEdge = icr3.word;
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0100     // Capture next Input on falling edge
; 0000 0101     TCCR3B &= ~(1<<ICES3);
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0102   }
; 0000 0103   else
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0104   {
; 0000 0105     // Faling Edge of ECHO
; 0000 0106     iFallingEdge = icr3.word;
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0107      // Capture next Input on rising edge
; 0000 0108     TCCR3B |= (1<<ICES3);
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0109     // Calculate length of ECHO (time per count is 4 us)
; 0000 010A     iTime = (iFallingEdge-iRisingEdge)*4;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 010B     bChange2 = 1;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 010C   }
;PCODE: $0000019E VOL: 0
; 0000 010D }
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;
;
;// Timer3 output compare A interrupt service routine
;interrupt [TIM3_COMPA] void timer3_compa_isr(void)
; 0000 0112 {
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 0113   // Trigger is fired every 100 ms
; 0000 0114   TRIGGER = 1;
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0115   delay_us(10);
;PCODE: $000001A6 VOL: 0
; 0000 0116   TRIGGER = 0;
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 0117 }
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;
;
;
;
;
;
;int state = state_stop;

	.DSEG
;int state_info = 0;
;
;int engine_dir = 0;
;
;
;  int leftCounter = 0;
;  int rightCounter = 0;
;  int leftEnc = 0;
;  int rightEnc = 0;
;
;
;
;
;int rc5_receive(unsigned char *ucToggle, unsigned char *ucAdress, unsigned char *ucData)
; 0000 012D {

	.CSEG
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 012E   unsigned int i;
; 0000 012F 
; 0000 0130   #asm("cli")
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;	*ucToggle -> Y+6
;	*ucAdress -> Y+4
;	*ucData -> Y+2
;	i -> R16,R17
;PCODE: $000001B0 VOL: 0
	cli
;PCODE: $000001B1 VOL: 0
; 0000 0131   i = rc5_data;			                    // read two bytes from interrupt !
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 0132   rc5_data = 0;
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 0133   #asm("sei")
;PCODE: $000001B6 VOL: 0
	sei
;PCODE: $000001B7 VOL: 0
; 0000 0134   if( i )
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 0135   {
; 0000 0136     *ucToggle = i >> 11 & 1;
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 0137     *ucAdress = i >> 6 & 0x1F;
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 0138     *ucData = (i & 0x3F) | (~i >> 7 & 0x40);
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 0139     return i;
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 013A   }
; 0000 013B   else
;PCODE: $000001D8 VOL: 0
; 0000 013C     return 0;
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 013D }
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;
;
;
;
;void rc5_display(void)
; 0000 0143 {
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 0144   lcd_clear();
;PCODE: $000001EA VOL: 0
; 0000 0145   puts("IR-DATA");
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0146   lcd_gotoxy(0,1);
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
; 0000 0147   lcd_putchar('0'+ucToggle);	            // Toggle Bit
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 0148   lcd_putchar(' ');
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 0149   itoa(ucAdress , s);	                    // Device address
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 014A   lcd_puts(s);
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 014B   lcd_putchar(' ');
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 014C   itoa(ucData, s);                          // Key Code
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 014D   lcd_puts(s);
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 014E }
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0

	.DSEG
_0x29:
	.BYTE 0x8
;
;
;
;
;
;
;
;
;
;
;
;
;
;  void STATE_LINE_SENSOR(){
; 0000 015C void STATE_LINE_SENSOR(){

	.CSEG
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 015D          lcd_clear();
;PCODE: $00000214 VOL: 0
; 0000 015E 
; 0000 015F    if(!LINE_DETECTOR_LEFT)
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0160      lcd_puts("LEFT: 1");
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 0161    else
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 0162      lcd_puts("LEFT: 0");
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 0163    if(!LINE_DETECTOR_RIGHT)
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 0164      lcd_puts(" RIGHT: 1");
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 0165    else
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 0166      lcd_puts(" RIGHT: 0");
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 0167 
; 0000 0168    lcd_gotoxy(0,1);
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 0169 
; 0000 016A    if(!LINE_DETECTOR_MID_LEFT)
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 016B      lcd_puts("MLEFT: 1");
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 016C    else
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 016D      lcd_puts("MLEFT: 0");
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 016E    if(!LINE_DETECTOR_MID_RIGHT)
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 016F      lcd_puts("MRIGHT:1");
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 0170    else
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 0171      lcd_puts("MRIGHT:0");
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 0172  }
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0

	.DSEG
_0x2B:
	.BYTE 0x48
;
;
;
;  void STATE_ENGINE(){
; 0000 0176 void STATE_ENGINE(){

	.CSEG
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 0177  char str[10];
; 0000 0178       ENGINE_ENABLE_RIGHT = 1;
;PCODE: $00000256 VOL: 0
;	str -> Y+0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 0179       ENGINE_ENABLE_LEFT = 1;
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 017A              lcd_clear();
;PCODE: $0000025B VOL: 0
; 0000 017B       if(engine_dir == 0){
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 017C         lcd_puts("     ENCODER  >>");
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 017D         ENGINE_DIRECTION_LEFT = 0;
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 017E         ENGINE_DIRECTION_RIGHT = 0;
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 017F         }
; 0000 0180       else{
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
; 0000 0181         lcd_puts("<<   ENCODER    ");
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 0182         ENGINE_DIRECTION_LEFT = 1;
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 0183         ENGINE_DIRECTION_RIGHT = 1;
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 0184         }
;PCODE: $00000271 VOL: 0
; 0000 0185          lcd_gotoxy(0,1);
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 0186          puts("L:");
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 0187          itoa(wheelEncoderCounter_left,str);
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 0188          puts(str);
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
; 0000 0189          puts(" R:");
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 018A          itoa(wheelEncoderCounter_right,str);
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 018B          puts(str);
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 018C        if(!BUMPER_RIGHT){
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 018D        delay_ms(250);
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 018E        engine_dir = !engine_dir;
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
; 0000 018F        }
; 0000 0190  }
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0

	.DSEG
_0x38:
	.BYTE 0x29
;
;   void STATE_ENGINE_DIR(){
; 0000 0192 void STATE_ENGINE_DIR(){

	.CSEG
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 0193  char str[10];
; 0000 0194       ENGINE_ENABLE_RIGHT = 1;
;PCODE: $0000029D VOL: 0
;	str -> Y+0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 0195       ENGINE_ENABLE_LEFT = 1;
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 0196       lcd_clear();
;PCODE: $000002A2 VOL: 0
; 0000 0197       if(engine_dir == 0){
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 0198         lcd_puts("     RECHTS    ");
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 0199         ENGINE_DIRECTION_LEFT = 0;
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 019A         ENGINE_DIRECTION_RIGHT = 1;
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 019B         }
; 0000 019C       else{
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 019D         lcd_puts("     LINKS    ");
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 019E         ENGINE_DIRECTION_LEFT = 1;
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 019F         ENGINE_DIRECTION_RIGHT = 0;
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 01A0         }
;PCODE: $000002B8 VOL: 0
; 0000 01A1          lcd_gotoxy(0,1);
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 01A2          puts("L:");
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 01A3          itoa(wheelEncoderCounter_left,str);
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 01A4          puts(str);
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 01A5          puts(" R:");
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 01A6          itoa(wheelEncoderCounter_right,str);
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 01A7          puts(str);
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 01A8        if(!BUMPER_RIGHT){
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0000 01A9        delay_ms(250);
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 01AA        engine_dir = !engine_dir;
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 01AB        }
; 0000 01AC  }
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0

	.DSEG
_0x48:
	.BYTE 0x26
;
;
;
;
; void STATE_DISTANCE_SENSOR(){
; 0000 01B1 void STATE_DISTANCE_SENSOR(){

	.CSEG
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 01B2    lcd_clear();
;PCODE: $000002E4 VOL: 0
; 0000 01B3 
; 0000 01B4    if(!DISTANCE_SENSOR_LEFT)
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 01B5      lcd_puts("LEFT: 1");
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 01B6    else
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 01B7      lcd_puts("LEFT: 0");
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 01B8    if(!DISTANCE_SENSOR_RIGHT)
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0000 01B9      lcd_puts(" RIGHT: 1");
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0000 01BA    else
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0000 01BB      lcd_puts(" RIGHT: 0");
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
; 0000 01BC 
; 0000 01BD    lcd_gotoxy(0,1);
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
; 0000 01BE 
; 0000 01BF    if(!DISTANCE_SENSOR_FRONT_LEFT)
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 01C0      lcd_puts("FLEFT: 1");
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 01C1    else
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0000 01C2      lcd_puts("FLEFT: 0");
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 01C3    if(!DISTANCE_SENSOR_FRONT_RIGHT)
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
; 0000 01C4      lcd_puts("FRIGHT:1");
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
; 0000 01C5    else
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 01C6      lcd_puts("FRIGHT:0");
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
; 0000 01C7  }
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0

	.DSEG
_0x54:
	.BYTE 0x48
;
;
;
; void STATE_LIGHTSENSOR(){
; 0000 01CB void STATE_LIGHTSENSOR(){

	.CSEG
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
; 0000 01CC  int right = LIGHT_SENSOR_RIGHT;
; 0000 01CD  int left = LIGHT_SENSOR_LEFT;
; 0000 01CE  char str[10];
; 0000 01CF  lcd_clear();
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;	right -> R16,R17
;	left -> R18,R19
;	str -> Y+4
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
; 0000 01D0     puts("LEFT:");
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
; 0000 01D1     itoa(left,str);
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0000 01D2     puts(str);
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 01D3     lcd_gotoxy(0,1);
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0000 01D4     puts("RIGHT:");
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 01D5     itoa(right,str);
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
; 0000 01D6     puts(str);
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0000 01D7  }
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0

	.DSEG
_0x5C:
	.BYTE 0xD
;
;
; void STATE_WIICAM(){
; 0000 01DA void STATE_WIICAM(){

	.CSEG
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
; 0000 01DB         readData();
;PCODE: $00000350 VOL: 0
; 0000 01DC         convertdata();
;PCODE: $00000351 VOL: 0
; 0000 01DD         lcd_clear();
;PCODE: $00000352 VOL: 0
; 0000 01DE         //Anzeige der Blobs als X/X-Wertepaare
; 0000 01DF         for(i=0; i<4; i++){
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
; 0000 01E0        	 	if (i<2){           //erste Zeile: Blob 1 und 2
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
; 0000 01E1        	 	   if(x[i]==1023||y[i]==1023){
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
; 0000 01E2        	 	        lcd_gotoxy(20 * (i), 0);
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
; 0000 01E3            		lcd_putsf("No Object!");
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0000 01E4           		}
; 0000 01E5        	 	   else{
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
; 0000 01E6        	 		itoa( x[i]-512, Wert);  //konvertiert die int-Ausgabe des Empfängers in char-Array
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0000 01E7           		lcd_gotoxy(20 * (i), 0);
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
; 0000 01E8            		lcd_puts(Wert);
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
; 0000 01E9            		itoa( y[i]-374, Wert);
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
; 0000 01EA            		lcd_gotoxy(20 * (i)+ 8, 0);
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
; 0000 01EB            		lcd_puts(Wert);
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
; 0000 01EC            		itoa( sWIICAM[i], Wert);
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
; 0000 01ED            		lcd_gotoxy(20 * (i)+ 16, 0);
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
; 0000 01EE            		lcd_puts(Wert);
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
; 0000 01EF            		}
;PCODE: $000003BB VOL: 0
; 0000 01F0                }
; 0000 01F1                else
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
; 0000 01F2                {
; 0000 01F3                    if(x[i]==1023||y[i]==1023){
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
; 0000 01F4        	 	        lcd_gotoxy(20 * (i-2), 1);
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
; 0000 01F5            		lcd_putsf("No Object!");
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
; 0000 01F6           		}
; 0000 01F7           	   else{                   //zweite Zeile: Blob 3 und 4
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
; 0000 01F8                 	itoa( x[i]-512, Wert);
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
; 0000 01F9           		lcd_gotoxy(20 * (i-2), 1);
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
; 0000 01FA            		lcd_puts(Wert);
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
; 0000 01FB                		itoa( y[i]-374, Wert);
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
; 0000 01FC            		lcd_gotoxy(20 * (i-2)+ 8, 1);
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
; 0000 01FD            		lcd_puts(Wert);
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
; 0000 01FE                		itoa( sWIICAM[i], Wert);
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
; 0000 01FF            		lcd_gotoxy(20 * (i-2)+ 16, 1);
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
; 0000 0200            		lcd_puts(Wert);
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
; 0000 0201            		}
;PCODE: $00000424 VOL: 0
; 0000 0202                }
;PCODE: $00000425 VOL: 0
; 0000 0203           }
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
; 0000 0204 
; 0000 0205 	delay_ms(30);
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
; 0000 0206 	WII_CAM_SCL = !WII_CAM_SCL;
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
; 0000 0207  }
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;
;
; void STATE_IRTOWER(){
; 0000 020A void STATE_IRTOWER(){
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
; 0000 020B     #ifndef DEBUG
; 0000 020C       rc5_display();
;PCODE: $0000043B VOL: 0
; 0000 020D     #endif
; 0000 020E 
; 0000 020F     if(rc5_receive(&ucToggle, &ucAdress, &ucData))
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
; 0000 0210     {
; 0000 0211       switch (ucData)
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
; 0000 0212       {
; 0000 0213         case 1:
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
; 0000 0214           //PORTE.0 = !PORTE.0;
; 0000 0215           delay_ms(100);
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
; 0000 0216           break;
;PCODE: $0000044C VOL: 0
; 0000 0217       }
;PCODE: $0000044D VOL: 0
; 0000 0218     }
; 0000 0219  }
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
;
;
;  void STATE_SERVO(){
; 0000 021C void STATE_SERVO(){
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
; 0000 021D     lcd_clear();
;PCODE: $00000453 VOL: 0
; 0000 021E       fnDisplay();
;PCODE: $00000454 VOL: 0
; 0000 021F       bChange = 0;
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
; 0000 0220       delay_ms(200);
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
; 0000 0221  }
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
;
;
;  void STATE_ULTRASONIC(){
; 0000 0224 void STATE_ULTRASONIC(){
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
; 0000 0225 
; 0000 0226        if (bChange2)
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
; 0000 0227     {
; 0000 0228       lcd_gotoxy(0,1);
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
; 0000 0229       if (iTime <= 6000)
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
; 0000 022A       {
; 0000 022B       lcd_clear();
;PCODE: $0000046A VOL: 0
; 0000 022C         lcd_puts("Objekt gefunden");
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
; 0000 022D       }
; 0000 022E 
; 0000 022F       else
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
; 0000 0230       {
; 0000 0231       lcd_clear();
;PCODE: $00000471 VOL: 0
; 0000 0232         lcd_putsf("Kein Object");
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
; 0000 0233       }
;PCODE: $00000476 VOL: 0
; 0000 0234       bChange2 = 0;
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
; 0000 0235     }
; 0000 0236       }
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0

	.DSEG
_0x73:
	.BYTE 0x10
;
; void STATE_ESP(){
; 0000 0238 void STATE_ESP(){

	.CSEG
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
; 0000 0239     lcd_clear();
;PCODE: $0000047F VOL: 0
; 0000 023A     puts("NICHT VERFUEGBAR");
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
; 0000 023B     //twi_slave_init();
; 0000 023C 
; 0000 023D  }
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0

	.DSEG
_0x75:
	.BYTE 0x11
;
;
;
;
;void STATE_MACHINE(){
; 0000 0242 void STATE_MACHINE(){

	.CSEG
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
; 0000 0243 
; 0000 0244         ENGINE_ENABLE_RIGHT = 0;
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
; 0000 0245         ENGINE_ENABLE_LEFT = 0;
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
; 0000 0246 
; 0000 0247        switch(state){
;PCODE: $0000048C VOL: 0
; 0000 0248 
; 0000 0249        case state_linedetector:
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
; 0000 024A               if(state_info == 0){
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
; 0000 024B                 lcd_puts("LINIEN SENSOR");
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
; 0000 024C                 delay_ms(1000);
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
; 0000 024D                 lcd_clear();
;PCODE: $00000499 VOL: 0
; 0000 024E                 state_info = 1;
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
; 0000 024F                 }
; 0000 0250               STATE_LINE_SENSOR();
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
; 0000 0251        break;
;PCODE: $0000049E VOL: 0
; 0000 0252 
; 0000 0253 
; 0000 0254        case state_engine:
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
; 0000 0255               if(state_info == 0){
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
; 0000 0256                 lcd_puts("MOTOREN");
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
; 0000 0257                 delay_ms(1000);
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
; 0000 0258                 lcd_clear();
;PCODE: $000004AC VOL: 0
; 0000 0259                 state_info = 1;
;PCODE: $000004AD VOL: 0
;PCODE: $000004AE VOL: 0
; 0000 025A                 }
; 0000 025B               STATE_ENGINE();
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
; 0000 025C        break;
;PCODE: $000004B1 VOL: 0
; 0000 025D 
; 0000 025E        case state_engine_dir:
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
; 0000 025F               if(state_info == 0){
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
; 0000 0260                 lcd_puts("LENKUNG");
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
; 0000 0261                 delay_ms(1000);
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
; 0000 0262                 lcd_clear();
;PCODE: $000004BF VOL: 0
; 0000 0263                 state_info = 1;
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
; 0000 0264                 }
; 0000 0265               STATE_ENGINE_DIR();
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
; 0000 0266        break;
;PCODE: $000004C4 VOL: 0
; 0000 0267 
; 0000 0268        case state_distance_sensor:
;PCODE: $000004C5 VOL: 0
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
; 0000 0269               if(state_info == 0){
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
; 0000 026A                 lcd_puts("DISTANZ SENSOR");
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
;PCODE: $000004CE VOL: 0
; 0000 026B                 delay_ms(1000);
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
; 0000 026C                 lcd_clear();
;PCODE: $000004D2 VOL: 0
; 0000 026D                 state_info = 1;
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
; 0000 026E                 }
; 0000 026F               STATE_DISTANCE_SENSOR();
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
; 0000 0270        break;
;PCODE: $000004D7 VOL: 0
; 0000 0271 
; 0000 0272        case state_lightsensor:
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
; 0000 0273               if(state_info == 0){
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
; 0000 0274                   lcd_puts("LICHT SENSOR");
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
; 0000 0275                   delay_ms(1000);
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
; 0000 0276                   lcd_clear();
;PCODE: $000004E5 VOL: 0
; 0000 0277                   state_info = 1;
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
; 0000 0278                 }
; 0000 0279               STATE_LIGHTSENSOR();
;PCODE: $000004E8 VOL: 0
;PCODE: $000004E9 VOL: 0
; 0000 027A        break;
;PCODE: $000004EA VOL: 0
; 0000 027B 
; 0000 027C        case state_wiicam:
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
; 0000 027D                 if(state_info == 0){
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
; 0000 027E                 lcd_puts("WII CAM");
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
; 0000 027F                 delay_ms(1000);
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
; 0000 0280                 lcd_clear();
;PCODE: $000004F8 VOL: 0
; 0000 0281                 state_info = 1;
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
; 0000 0282                 }
; 0000 0283               STATE_WIICAM();
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
; 0000 0284        break;
;PCODE: $000004FD VOL: 0
; 0000 0285 
; 0000 0286        case state_irtower:
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
; 0000 0287                 if(state_info == 0){
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
; 0000 0288                 lcd_puts("IR TOWER");
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
; 0000 0289                 delay_ms(1000);
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
; 0000 028A                 lcd_clear();
;PCODE: $0000050B VOL: 0
; 0000 028B                 state_info = 1;
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
; 0000 028C                 }
; 0000 028D               STATE_IRTOWER();
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
; 0000 028E        break;
;PCODE: $00000510 VOL: 0
; 0000 028F 
; 0000 0290        case state_servo:
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
; 0000 0291                 if(state_info == 0){
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
; 0000 0292                 lcd_puts("SERVO");
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
; 0000 0293                 delay_ms(1000);
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
; 0000 0294                 lcd_clear();
;PCODE: $0000051E VOL: 0
; 0000 0295                 state_info = 1;
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
; 0000 0296                 }
; 0000 0297               STATE_SERVO();
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
; 0000 0298        break;
;PCODE: $00000523 VOL: 0
; 0000 0299 
; 0000 029A        case state_ultrasonic:
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
; 0000 029B                 if(state_info == 0){
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
; 0000 029C                 lcd_puts("ULTRASCHALL");
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
; 0000 029D                 delay_ms(1000);
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
; 0000 029E                 lcd_clear();
;PCODE: $00000531 VOL: 0
; 0000 029F                 state_info = 1;
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
; 0000 02A0                 }
; 0000 02A1               STATE_ULTRASONIC();
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
; 0000 02A2        break;
;PCODE: $00000536 VOL: 0
; 0000 02A3 
; 0000 02A4               case state_esp:
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
; 0000 02A5                 if(state_info == 0){
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
; 0000 02A6                 lcd_puts("ESP TEST");
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
; 0000 02A7                 delay_ms(1000);
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
; 0000 02A8                 lcd_clear();
;PCODE: $00000544 VOL: 0
; 0000 02A9                 state_info = 1;
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
; 0000 02AA 
; 0000 02AB                 }
; 0000 02AC               STATE_ESP();
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
; 0000 02AD        break;
;PCODE: $00000549 VOL: 0
; 0000 02AE 
; 0000 02AF 
; 0000 02B0        default:
;PCODE: $0000054A VOL: 0
; 0000 02B1           lcd_clear();
;PCODE: $0000054B VOL: 0
; 0000 02B2            lcd_puts("TEST - PROGRAMM");
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
; 0000 02B3       }
;PCODE: $00000550 VOL: 0
; 0000 02B4        delay_ms(50);
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
; 0000 02B5 }
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0

	.DSEG
_0x7F:
	.BYTE 0x76
;
;
;
;
;
;
;
;
;void main(void)
; 0000 02BF {

	.CSEG
;PCODE: $00000556 VOL: 0
; 0000 02C0 
; 0000 02C1 // I2C Bus initialization
; 0000 02C2 i2c_init();
;PCODE: $00000557 VOL: 0
; 0000 02C3 //Kamera initialisieren
; 0000 02C4 wii_cam_init();
;PCODE: $00000558 VOL: 0
; 0000 02C5 
; 0000 02C6 port_init();
;PCODE: $00000559 VOL: 0
; 0000 02C7 
; 0000 02C8 while (1)
;PCODE: $0000055A VOL: 0
; 0000 02C9       {
; 0000 02CA            STATE_MACHINE();
;PCODE: $0000055B VOL: 0
; 0000 02CB 
; 0000 02CC        if(!BUMPER_LEFT){
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
; 0000 02CD        delay_ms(250);
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
; 0000 02CE        lcd_clear();
;PCODE: $00000562 VOL: 0
; 0000 02CF 
; 0000 02D0        if(state+1 > state_stop) {
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
; 0000 02D1        state = 0;
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
; 0000 02D2        }
; 0000 02D3        else {
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
; 0000 02D4        state++;
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
; 0000 02D5        if (state==7){
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
; 0000 02D6              inSERVOTEST=1;
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
; 0000 02D7        }else{
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
; 0000 02D8         inSERVOTEST=0;
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
; 0000 02D9        }
;PCODE: $0000057A VOL: 0
; 0000 02DA        }
;PCODE: $0000057B VOL: 0
; 0000 02DB 
; 0000 02DC        state_info = 0;
;PCODE: $0000057C VOL: 0
;PCODE: $0000057D VOL: 0
; 0000 02DD       }
; 0000 02DE 
; 0000 02DF 
; 0000 02E0 }
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
; 0000 02E1 
; 0000 02E2 }
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;
;void wii_cam_init(void)
; 0000 02E5 {
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
; 0000 02E6  //Kamera initialisieren
; 0000 02E7 	write2Byte(0x30,0x01);        	//Camera on
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
; 0000 02E8 	write2Byte(0x30,0x08);         	//set sensitivity Block 1 und 2
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
; 0000 02E9 	write2Byte(0x06,0x90);          //sensitivity part1
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
; 0000 02EA 	write2Byte(0x08,0xC0);          //sensitivity part2
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
; 0000 02EB 	write2Byte(0x1A,0x40);
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
; 0000 02EC 	write2Byte(0x33,0x33);          //setting Mode : hier extended
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
; 0000 02ED 	delay_ms(100);
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
; 0000 02EE }
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
;
;
;void write2Byte(char b1, char b2)
; 0000 02F2 {
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
; 0000 02F3   	i2c_start();
;	b1 -> Y+1
;	b2 -> Y+0
;PCODE: $000005AB VOL: 0
; 0000 02F4         i2c_write(slaveadress); //I2C-Adresse der Kamera, hier 0xBO
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
; 0000 02F5         i2c_write(b1);
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
; 0000 02F6         i2c_write(b2);
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
; 0000 02F7         i2c_stop();
;PCODE: $000005B5 VOL: 0
; 0000 02F8         delay_ms(10);
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
; 0000 02F9 }
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
;
;void readData(void)
; 0000 02FC {
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
; 0000 02FD  	unsigned char i=0;
; 0000 02FE  	i2c_start();
;PCODE: $000005BE VOL: 0
;	i -> R17
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
; 0000 02FF         i2c_write(slaveadress); //I2C-Adresse der Kamera
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
; 0000 0300         i2c_write(0x36);
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
; 0000 0301         i2c_stop();
;PCODE: $000005C8 VOL: 0
; 0000 0302         delay_ms(1);
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
; 0000 0303         i2c_start();
;PCODE: $000005CC VOL: 0
; 0000 0304         i2c_write(slaveread); //I2C-Adresse der Kamera Lesemodus 0xB1
;PCODE: $000005CD VOL: 0
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
; 0000 0305         for(i=0; i<15; i++){
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
;PCODE: $000005D8 VOL: 0
; 0000 0306    	   	data[i]=i2c_read(1);
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
;PCODE: $000005E4 VOL: 0
; 0000 0307         }
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
; 0000 0308         data[15]=i2c_read(0);
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
; 0000 0309         i2c_stop();
;PCODE: $000005F1 VOL: 0
; 0000 030A }
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
;
;void convertdata(void)
; 0000 030D {
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
; 0000 030E     int i=0;
; 0000 030F     for(i=0; i<4; i++) {
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
;	i -> R16,R17
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
; 0000 0310  	temp= (data[3+3*i]&0x30)<<4;
;PCODE: $00000604 VOL: 0
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
; 0000 0311  	x[i]=data[1+3*i]+temp;
;PCODE: $0000060F VOL: 0
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
;PCODE: $00000618 VOL: 0
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
;PCODE: $0000061C VOL: 0
;PCODE: $0000061D VOL: 0
;PCODE: $0000061E VOL: 0
;PCODE: $0000061F VOL: 0
; 0000 0312  	temp= (data[3+3*i]&0xC0)<<2;
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
;PCODE: $00000624 VOL: 0
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
; 0000 0313  	y[i]=data[2+3*i]+temp;
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
; 0000 0314  	s[i]=data[3+3*i]&0x0F;
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
; 0000 0315        }
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
;PCODE: $0000064D VOL: 0
;PCODE: $0000064E VOL: 0
; 0000 0316 }
;PCODE: $0000064F VOL: 0
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
